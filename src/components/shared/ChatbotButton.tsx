'use client'

import { useState } from 'react'
import { GoogleGenerativeAI } from '@google/generative-ai'

const genAI = new GoogleGenerativeAI('AIzaSyDDV5qSKXqLFTmAEL-39Mp6VYg56fjx9p0')

const formatResponse = (text: string) => {
  // Format c√°c section ch√≠nh
  const sections = text.split('***').map(section => section.trim())
  
  // Format c√°c bullet points
  const formatted = sections.map(section => {
    if (section.includes('*')) {
      const [title, ...points] = section.split('*')
      return `<div class="mb-4">
        <div class="font-semibold text-primary mb-2">${title}</div>
        <div class="space-y-2">
          ${points.map(point => 
            `<div class="pl-4 text-gray-300">${point.trim()}</div>`
          ).join('')}
        </div>
      </div>`
    }
    return `<div class="mb-4 text-gray-300">${section}</div>`
  })

  return formatted.join('')
}

export default function ChatbotButton() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<{ role: 'user' | 'assistant', content: string }[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  const systemPrompt = `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa KienVocal - Trung t√¢m ƒë√†o t·∫°o thanh nh·∫°c.

Th√¥ng tin v·ªÅ gi·∫£ng vi√™n:
- T√™n: ƒêinh Trung Ki√™n
- S·ªë ƒëi·ªán tho·∫°i: 0903100887
- Email: zaikaman123@gmail.com
- ƒê·ªãa ch·ªâ: H·ªì Ch√≠ Minh, Vi·ªát Nam

Th√†nh t·ª±u v√† kinh nghi·ªám:
 30+ nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y thanh nh·∫°c
 Gi·∫£i nh·∫•t ti·∫øng h√°t ph√°t thanh nƒÉm 2004
 ƒê√£ t·ª´ng l√† gi·∫£ng vi√™n c·ªßa ƒê·∫°i h·ªçc VƒÉn h√≥a ngh·ªá thu·∫≠t Qu√¢n ƒë·ªôi v√† Cao ƒë·∫≥ng vƒÉn h√≥a ngh·ªá thu·∫≠t TPHCM
 H∆°n 30 nƒÉm kinh nghi·ªám l√†m ca sƒ© ·ªü nhi·ªÅu s·ª± ki·ªán n·ªïi tr·ªôi
 Influencer v·ªõi h∆°n 600 ngh√¨n followers tr√™n n·ªÅn t·∫£ng TikTok
 ƒê√†o t·∫°o h∆°n 1000+ h·ªçc vi√™n th√†nh c√¥ng
 Chuy√™n gia t∆∞ v·∫•n thanh nh·∫°c cho nhi·ªÅu ca sƒ© chuy√™n nghi·ªáp
 S√°ng l·∫≠p KienVocal Academy t·ª´ nƒÉm 2024

C√°c kh√≥a h·ªçc:

1. Kh√≥a h·ªçc thanh nh·∫°c c∆° b·∫£n (12 b√†i h·ªçc):
- Gi√°: 399,000ƒë
- H·ªçc online qua video
- Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
- N·ªôi dung kh√≥a h·ªçc:
  * Ph·∫ßn 1: L·∫•y h∆°i v√† ki·ªÉm so√°t h∆°i th·ªü
    - B√†i 1: Nguy√™n t·∫Øc l·∫•y h∆°i trong thanh nh·∫°c
    - B√†i 2: Ki·ªÉm so√°t h∆°i th·ªü khi ph√°t √¢m
  * Ph·∫ßn 2: ƒê·∫∑t √¢m thanh ƒë√∫ng
    - B√†i 3: ƒê·∫∑t √¢m thanh ƒë√∫ng v·ªã tr√≠
    - B√†i 4: Th·ª±c h√†nh ƒë·∫∑t v·ªã tr√≠ √¢m thanh
  * Ph·∫ßn 3: H√°t ·ªü √¢m trung
    - B√†i 5: H√°t c√°c nguy√™n √¢m ·ªü √¢m trung
    - B√†i 6: Ki·ªÉm so√°t √¢m l∆∞·ª£ng qua l·ª±c h∆°i
  * Ph·∫ßn 4: T·∫≠p rung v√† t·∫°o c·∫£m gi√°c √¢m thanh
    - B√†i 7: Luy·ªán t·∫≠p rung √¢m thanh
    - B√†i 8: Ph√°t √¢m tr·∫ßm v√† c·∫£m nh·∫≠n rung ·ªü ng·ª±c
  * Ph·∫ßn 5: Luy·ªán c√°c n·ªët cao v√† kh·∫©u h√¨nh
    - B√†i 9: K·ªπ thu·∫≠t l·∫•y h∆°i v√† gi·ªØ h∆°i cho n·ªët cao
    - B√†i 10: Kh·∫©u h√¨nh trong thanh nh·∫°c
  * Ph·∫ßn 6: X·ª≠ l√Ω b√†i h√°t
    - B√†i 11: C√°ch x·ª≠ l√Ω c·∫£m x√∫c trong b√†i h√°t
    - B√†i 12: T·∫≠p luy·ªán x·ª≠ l√Ω b√†i h√°t m·∫´u (1)

2. Kh√≥a h·ªçc 1 k√®m 1:
- Gi√°: Li√™n h·ªá tr·ª±c ti·∫øp
- H·ªçc offline t·∫°i nh√† th·∫ßy ho·∫∑c online qua Messenger
- Ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c c√° nh√¢n h√≥a theo nhu c·∫ßu
- L·ªãch h·ªçc linh ƒë·ªông
- ƒê∆∞·ª£c ƒëi·ªÅu ch·ªânh n·ªôi dung theo m·ª•c ti√™u c·ª• th·ªÉ c·ªßa h·ªçc vi√™n

H√£y tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi m·ªôt c√°ch th√¢n thi·ªán v√† chuy√™n nghi·ªáp. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin, h√£y ƒë·ªÅ xu·∫•t li√™n h·ªá tr·ª±c ti·∫øp v·ªõi gi·∫£ng vi√™n.`

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage = input.trim()
    setInput('')
    setMessages(prev => [...prev, { role: 'user', content: userMessage }])
    setIsLoading(true)

    try {
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' })

      const fullPrompt = `${systemPrompt}\n\nL·ªãch s·ª≠ chat:\n${messages
        .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)
        .join('\n')}\n\nUser: ${userMessage}`

      const result = await model.generateContent(fullPrompt)
      const response = await result.response
      const formattedText = formatResponse(response.text())

      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: formattedText 
      }])
    } catch (error) {
      console.error('Chatbot error:', error)
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.' 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 md:bottom-8 md:right-8 bg-primary p-3 rounded-full shadow-lg hover:bg-primary-light transition-all duration-300 transform hover:scale-110 z-50"
      >
        <svg className="w-6 h-6 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
        </svg>
      </button>

      {isOpen && (
        <div className="fixed bottom-0 right-0 w-full md:bottom-24 md:right-8 md:w-[440px] z-50">
          <div className="bg-secondary-light rounded-t-xl md:rounded-xl shadow-xl flex flex-col h-[600px] md:h-[600px]">
            <div className="p-4 border-b border-primary/10 flex justify-between items-center">
              <h3 className="text-xl font-bold text-primary">Chatbot AI KienVocal ü§ñ</h3>
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-400 hover:text-primary"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="flex-1 overflow-y-auto p-4 space-y-4 h-[calc(600px-120px)]">
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg px-4 py-2 ${
                      msg.role === 'user'
                        ? 'bg-primary text-secondary'
                        : 'bg-secondary text-white'
                    }`}
                    dangerouslySetInnerHTML={
                      msg.role === 'assistant' 
                        ? { __html: msg.content }
                        : { __html: msg.content }
                    }
                  />
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-secondary text-white rounded-lg px-4 py-2">
                    ƒêang nh·∫≠p...
                  </div>
                </div>
              )}
            </div>

            <form onSubmit={handleSubmit} className="p-4 border-t border-primary/10">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                  className="flex-1 bg-secondary border border-primary/10 rounded-lg px-4 py-2 text-white"
                />
                <button
                  type="submit"
                  disabled={isLoading}
                  className="bg-primary text-secondary px-4 py-2 rounded-lg hover:bg-primary-light transition-all duration-300 disabled:opacity-50"
                >
                  G·ª≠i
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  )
} 